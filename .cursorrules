# .cursorrules

## 使命（Purpose）
確保在 Cursor 專案中，所有 AI／人類協作都能：
1. **持續學習**：即時記錄錯誤與修正，避免重蹈覆轍  
2. **系統化思考**：在 Scratchpad 中拆解、追蹤、反思每項任務  
3. **自我進化**：隨著專案進展，自動汰換過時資訊、擴充新經驗  

---

## 區塊結構（File Sections）

### 1. Lessons  
- **User-Specified Lessons**：使用者明確指出的注意事項或偏好  
- **Cursor-Learned**：AI 在對話中獲得的修正、最佳解法或踩坑經驗  
- **更新規則**  
  1. 一旦遇到可重複利用的經驗，立即寫入此區塊  
  2. 以條列簡短描述「錯誤 → 修正 → 結論」  

### 2. Scratchpad  
為「進行中任務」的暫存區，協助**思考、拆解、追蹤**。  
建議結構：  

```md
## Plan
- [ ] 步驟 1  
- [ ] 步驟 2  
  - 子步驟  
- [ ] 步驟 3  

## Progress
- 2025-05-20 02:15  ✅ 完成步驟 1，意外發現 X 問題  
- 2025-05-20 03:10  ➡️ 修正並更新 Lessons  
````

> **規範**
>
> * 僅放「尚未完成」或「需要回顧」的事項
> * 任務完成後，將相關筆記移至 Lessons 或刪除
> * 定期（建議每日／每次任務結束）清理過期內容，保持精簡

---

## 自我進化機制（Self-Evolution）

1. **事件驅動更新**

   * 當發生「錯誤被糾正」「新工具版本」「重構大改」等事件，立即寫入 *Lessons*
2. **週期性回顧**

   * 於每週或里程碑結束時，檢查 Scratchpad 與 Lessons：

     * 刪除無用資訊
     * 合併重複經驗
     * 標註已過時的做法
3. **版本註記**

   * 重要調整可附上日期與簡短說明，方便追溯
4. **遷移策略**

   * 若經驗屬於跨專案共通知識，考慮抽離到中央知識庫或維基

---

## 使用守則（Best Practices）

1. **先讀後寫**：接到新任務→先掃過 Scratchpad，確保不重複、方向正確
2. **小步快寫**：任何靈感、疑問、暫時結論都先丟進 Scratchpad，再逐步整理
3. **完成即歸檔**：任務結束立即把重點學習寫到 Lessons，並刪除或精簡 Scratchpad
4. **保持原子性**：每條 Lesson 僅描述一個教訓，方便搜尋與重用
5. **用日期戳記**：Progress 與 Lessons 建議加時間，提升可追溯性
6. **避免冗長**：Scratchpad ≠ 最終文件；寫足夠讓自己回想即可

---

# Lessons

## User-Specified Lessons
- **模組化架構重要性**：使用者要求將兩個Discord bot合併，並採用模組化設計，讓每個功能獨立成資料夾
- **Google最佳實踐遵循**：代碼需符合Google Style Guide，並使用乾淨、易維護的架構
- **繁體中文溝通**：所有回應都需要用繁體中文，但代碼註釋和變數名使用英文
- **配置簡化原則**：避免重複配置，使用主要/輔助模型概念統一管理AI服務

## Cursor-Learned
- **2025-01-19**  
  - *任務*：整合AIHacker和AITicket兩個Discord bot成為一個模組化機器人  
  - *實作*：創建了HacksterBot，採用核心系統+模組架構設計  
  - *結論*：模組化架構讓功能可獨立啟用/停用，易於擴展和維護

- **2025-01-19**
  - *任務*：簡化AI模型配置管理
  - *問題*：每個模組都有重複的AI服務配置，難以維護
  - *解決*：設計主要模型(複雜AI功能)和輔助模型(分類/審核)的二元配置
  - *結論*：簡化配置讓管理更容易，避免重複設定API金鑰

- **2025-01-19**
  - *任務*：修復運行時模組引用錯誤
  - *問題*：工單模組試圖存取 `interaction.client.loaded_modules`，但 HacksterBot 使用 `modules` 屬性
  - *解決*：統一修正所有模組中的屬性引用，使用正確的 `interaction.client.modules`
  - *結論*：模組間引用需要與核心架構保持一致，避免屬性名稱不匹配

- **2025-01-19**
  - *任務*：修復工單系統功能缺失
  - *問題*：1)創建工單後沒有確認訊息 2)活動選擇功能被註釋掉 3)添加成員功能響應速度慢
  - *解決*：1)修改process_ticket返回頻道並發送確認訊息 2)從events.json動態載入活動 3)優化添加成員UI回饋
  - *結論*：用戶體驗需要即時反饋，功能完整性比穩定性更重要

- **2025-01-19**
  - *任務*：完整重寫 tickets 模組，完全複製 AITicket 所有功能
  - *問題*：之前的實現不夠完整，缺少完整文案、AI分類、事件分析等功能
  - *解決*：完整移植 AITicket 所有功能，包括 LLMClient、完整的UI流程、精確的文案、AI分類和事件分析
  - *結論*：完全複製現有系統比重新設計更有效率，確保功能完整性和一致性

- **2025-01-19**
  - *任務*：修正 tickets 模組 AI 服務架構
  - *問題*：tickets 模組自己創建了 LLMClient，違反了統一 AI 服務架構原則，導致 "All LLM providers failed" 錯誤
  - *解決*：移除自定義 LLMClient，改用 HacksterBot 統一的 AI 服務架構，創建專門的 ticket_classifier_agent
  - *結論*：模組應該使用統一的 AI 服務架構，而不是各自創建獨立的 AI 客戶端

- **2025-01-19**
  - *任務*：修復工單模組數據庫錯誤和權限更新問題
  - *問題*：1) close_channel 中調用不存在的 self.db.close_ticket 導致 AttributeError 2) 活動更換時沒有移除舊事件角色權限
  - *解決*：1) 移除數據庫調用，tickets 模組使用文件系統追蹤 2) 修改 update_channel_for_event 在添加新角色前先移除所有其他事件角色
  - *結論*：模組架構要一致，不要混用不同的資料儲存方式；權限更新時要考慮清理舊權限避免衝突

- **2025-01-19**
  - *任務*：修復 AI 工單分類錯誤，改善分類準確度
  - *問題*：用戶輸入"scrapyard taiwan"被錯誤分類為"其他問題"，而非"活動諮詢"
  - *解決*：更新 ticket_classifier 系統提示詞，添加具體的 HackIt 活動列表和關鍵詞，強調活動相關輸入應分類為"活動諮詢"
  - *結論*：AI 分類器需要具體的上下文信息才能準確分類，泛泛的分類定義不足以處理具體的活動名稱

- **2025-01-19**
  - *任務*：移除硬編碼，實現動態活動配置
  - *問題*：ticket_classifier.py 和 tickets/__init__.py 中有硬編碼的活動列表，無法動態更新
  - *解決*：修改 ticket_classifier.py 動態從 events.json 讀取活動並生成系統提示詞，移除 tickets 模組中的硬編碼默認配置
  - *結論*：避免硬編碼，使用配置文件讓系統更靈活和易於維護

- **2025-01-19**
  - *任務*：修復工單系統類別變更時的權限同步問題
  - *問題*：用戶先選擇活動（設置活動角色權限），然後按下"類別分類有誤"改成其他類別時，舊的活動角色權限沒有被清理
  - *解決*：創建 clear_event_permissions 方法清理所有活動角色權限，在所有"類別分類有誤"按鈕處理器中調用此方法
  - *結論*：權限管理需要考慮逆向操作，當用戶改變選擇時要清理之前設置的權限，避免權限累積和衝突

- **2025-01-19**
  - *任務*：修復活動選擇下拉菜單沒有顯示的問題
  - *問題*：選擇「活動諮詢」類別後，應該顯示活動選擇下拉菜單，但只出現了空白的訊息
  - *根本原因*：CategorySelectionView.select_callback 中錯誤使用了 EventSelectionView（只有按鈕）而不是 EventSelectView（包含下拉菜單）
  - *解決*：修改 CategorySelectionView.select_callback 使用正確的 EventSelectView，並修復 EventSelectView 中的模組引用問題
  - *結論*：UI 組件命名要清晰區分功能，避免混淆使用；View 初始化時不能依賴運行時的 bot 模組引用

- **2025-01-19**
  - *任務*：改善工單系統用戶體驗，顯示初始問題並統一回應格式
  - *問題*：部分分類的工單創建後沒有顯示用戶的初始問題，且不同分類的回應格式不一致
  - *解決*：修改 finalize_ticket_creation 和 send_initial_ticket_message 方法，統一在所有工單中顯示用戶初始問題並添加鼓勵描述
  - *結論*：用戶體驗需要一致性，所有工單類型都應該顯示初始問題並鼓勵進一步描述

- **2025-01-19**
  - *任務*：修復工單系統訊息清理和按鈕完整性問題
  - *問題*：更改類別或活動時舊訊息沒被正確清理，且最終訊息缺少完整的管理按鈕
  - *解決*：重新設計訊息替換邏輯，使用 edit_original_response 替換訊息而非創建新訊息，統一使用 GenerateTicketView 確保按鈕完整性
  - *結論*：訊息更新應該替換而非累積，最終訊息必須包含完整的管理功能

- **2025-01-19**
  - *任務*：修復工單系統訊息重複和缺少重選活動按鈕問題
  - *問題*：1) 事件分類流程中發送了重複的訊息 2) 最終訊息缺少重新選擇活動的按鈕
  - *解決*：1) 創建統一的 process_event_categorization 方法處理事件分類流程，避免重複訊息 2) 創建專門的 EventTicketView 包含重選活動按鈕 3) 使用訊息編輯而非新建避免累積
  - *結論*：事件分類需要專門的流程和視圖，避免訊息重複；活動相關工單需要提供重新選擇活動的功能

- **2025-01-19**
  - *任務*：完整複製 AIHacker 的 moderation 功能到 HacksterBot
  - *問題*：新創建的 moderation 模組嘗試存取不存在的配置屬性 `review_enabled`，導致 AttributeError
  - *解決*：在 ModerationConfig 中添加 `review_enabled` 屬性，並更新 .env 和 .env.example 配置檔案
  - *結論*：模組開發時必須確保所有引用的配置屬性都已在配置類中定義，配置檔案也需要同步更新

- **2025-01-19**
  - *任務*：修復 moderation 模組語法錯誤和 AI 代理調用問題
  - *問題*：1) moderation 模組中有縮排錯誤導致 IndentationError 2) Azure OpenAI 配置缺少 API 版本
  - *解決*：1) 修復代碼中的縮排問題，確保所有語句正確對齊 2) 雖然 Azure OpenAI 有配置問題，但備用的 Gemini 代理成功設置 3) 所有模組成功載入並運行
  - *結論*：語法錯誤會阻止模組載入；備用 AI 代理配置很重要，能在主要代理失敗時提供替代方案；模組化架構的容錯性讓系統能在部分配置問題下仍正常運行

- **2025-01-19**
  - *任務*：完成 OpenAI moderation API 違規類型繁體中文映射
  - *問題*：違規通知和日誌中的英文類型名稱（如 harassment、violence）對繁體中文使用者不夠友善，部分禁言通知仍顯示英文違規類型
  - *解決*：1) 創建完整的 violation_mapping.py 映射所有 OpenAI moderation API 類型到繁體中文 2) 包含主要類型和子類型的詳細映射 3) 添加嚴重程度和描述功能 4) 整合到 moderation 模組的日誌和通知系統 5) 修復 mute_manager.py 中的禁言通知，確保所有地方都使用繁體中文
  - *結論*：用戶體驗的本地化很重要，技術術語應該翻譯成用戶熟悉的語言；完整的映射系統讓維護更容易；需要檢查所有相關文件確保一致性

- **2025-01-19**
  - *任務*：修復違規類型翻譯映射不完整問題
  - *問題*：違規類型映射使用連字符格式（self-harm）但實際 API 可能使用底線格式（self_harm），導致部分違規類型無法正確翻譯
  - *解決*：1) 在 violation_mapping.py 中添加所有可能的格式變化（連字符、底線、混合格式）2) 確保 harassment_threatening、self_harm、self_harm_intent 等都有正確映射 3) 同時更新嚴重程度和描述映射 4) 測試驗證所有格式都能正確翻譯
  - *結論*：API 數據格式可能不一致，需要支援多種格式變化；包容性映射比精確匹配更實用；完整測試確保翻譯覆蓋率

- **2025-01-19**
  - *任務*：完整複製 AIHacker 的歡迎功能到 HacksterBot
  - *問題*：用戶要求完全複製 AIHacker 的歡迎功能，包括創意文案、AI 代理、流式回應處理等所有原始實現
  - *解決*：1) 完全重寫 welcome 模組，基於 AIHacker 的實現 2) 複製完整的創意提示詞和台灣文化語境 3) 實現流式回應處理和重試機制 4) 創建 welcomed_members_db 和 welcome_handler 服務 5) 修復配置問題，使用 config.data_dir 而非不存在的 database.path
  - *結論*：完全複製現有成功實現比重新設計更有效率；配置屬性引用要與實際結構匹配；歡迎功能需要完整的 AI 整合和資料庫追蹤

- **2025-01-19**
  - *任務*：修復歡迎模組 AI 代理調用和流式回應錯誤
  - *問題*：1) AI 代理調用返回協程對象而非 Agent 實例，導致 "'coroutine' object has no attribute 'run_stream'" 錯誤 2) 流式回應處理方式不正確
  - *解決*：1) 修改歡迎模組直接使用 ai_select.get_agent 和 create_general_agent，而非通過 AI 模組的 get_agent 方法 2) 修正流式回應處理，使用 await self.ai_agent.run_stream(message) 而非 async with 語法 3) 確保 AI 代理創建流程正確：get_agent 獲取模型 → create_general_agent 創建代理
  - *結論*：模組間 AI 服務調用要使用統一的 ai_select 接口；流式回應 API 使用要與 pydantic_ai 文檔一致；AI 代理創建流程要明確區分模型實例和代理實例

- **2025-01-19**
  - *任務*：修復歡迎模組時區錯誤並整合統一 AI 服務
  - *問題*：歡迎功能出現 "can't subtract offset-naive and offset-aware datetimes" 錯誤，原因是混用了 datetime.utcnow() 和 member.created_at
  - *解決*：1) 將 datetime.utcnow() 改為 discord.utils.utcnow() 確保時區一致性 2) 添加統一 AI 服務支援生成個性化歡迎訊息 3) 實現 AI 代理設置和錯誤處理機制 4) 保留原有模板作為後備方案
  - *結論*：Discord.py 中時區處理要使用 discord.utils.utcnow()；統一 AI 服務架構要在所有模組中一致應用；AI 功能要有降級機制

- **2025-01-19**
  - *任務*：修復歡迎模組舊資料庫結構問題
  - *問題*：1) 舊資料庫文件中包含已移除的 last_welcomed_at 欄位，導致 "no such column" 錯誤 2) 多個位置存在舊的資料庫文件
  - *解決*：1) 刪除所有舊的 welcomed_members.db 文件，讓系統重新創建正確的表結構 2) 確保資料庫初始化代碼與實際查詢一致 3) 清理 data/ 和 HacksterBot/data/ 目錄下的舊資料庫
  - *結論*：資料庫結構變更時要清理舊文件；多個資料目錄可能導致混淆，需要統一清理；資料庫初始化要與查詢語句保持一致

- **2025-01-19**
  - *任務*：修復 URL 檢測系統，完全基於 AIHacker 的成功方法重寫
  - *問題*：HacksterBot 的 URL 檢測系統過於簡化，使用硬編碼的域名白名單和啟發式檢查，導致「不管傳什麼都被視為可疑連結」的 bug
  - *解決*：1) 完全移植 AIHacker 的 url_safety.py 實現，包含 VirusTotal API 整合 2) 實現完整的 url_unshortener.py 支援多種縮網址服務和 headless browser 3) 創建 url_blacklist.py 提供快速查詢和自動學習 4) 移除所有硬編碼白名單，改用真實 API 檢測 5) 增加檢測時間和重試次數設置
  - *結論*：不要簡化已經成功的實現；真實的 API 檢測比啟發式規則更可靠；自動學習的黑名單系統能持續改進檢測效果；URL 安全檢測需要多層防護（黑名單+展開+API 檢測）

- **2025-01-19**
  - *任務*：完全移除 URL 安全檢測中的硬編碼白名單和黑名單
  - *問題*：用戶強調不要任何硬編碼，要純粹透過 API 和爬蟲來檢測網站安全性，但代碼中仍有 SAFE_DOMAINS、SUSPICIOUS_KEYWORDS、HIGH_RISK_TLDS 等硬編碼列表
  - *解決*：1) 完全移除所有硬編碼的域名、關鍵詞、TLD 列表 2) 移除基於硬編碼的 _is_safe_domain 和 _has_suspicious_patterns 方法 3) 移除啟發式分析 _heuristic_analysis 方法 4) 改用純 API 檢測：VirusTotal URL API + VirusTotal Domain API 5) 當 API 不可用時返回安全結果而不是阻擋
  - *結論*：用戶要求純 API 檢測時要完全移除硬編碼；依賴真實威脅情報 API 比硬編碼規則更準確；當檢測失敗時應該寬鬆處理避免誤判

- **2025-01-19**
  - *任務*：修復配置加載錯誤和 URLSafetyChecker 初始化問題
  - *問題*：1) URL_SAFETY_REQUEST_TIMEOUT 配置值為 '5.0' 但用 int() 轉換導致 ValueError 2) URLSafetyChecker.__init__ 不接受參數但被傳入 config 3) __del__ 方法存取不存在的 session 屬性
  - *解決*：1) 修改 settings.py 使用 int(float()) 轉換浮點數格式的環境變數 2) 修改 URLSafetyChecker.__init__ 接受可選的 config 參數 3) 在 __del__ 中添加 hasattr 檢查避免 AttributeError
  - *結論*：環境變數格式要考慮浮點數情況；模組初始化要與調用方期望一致；__del__ 方法要檢查屬性存在性避免錯誤

- **2025-01-19**
  - *任務*：修復審核言論複審功能和詳細日誌記錄
  - *問題*：1) 複審功能條件檢查錯誤，檢查 config.moderation.enabled 而非 review_enabled 2) 缺少複審 AI 服務配置 3) 日誌記錄不夠詳細，無法追蹤審核過程 4) 違規通知中函數名稱錯誤
  - *解決*：1) 修正複審條件為 config.moderation.review_enabled 並檢查代理可用性 2) 在 ModerationConfig 添加完整的複審 AI 配置屬性 3) 大幅增加審核、複審、違規處理的詳細日誌 4) 調整日誌級別為 DEBUG 5) 增強錯誤處理和堆疊追蹤 6) 修正 _send_violation_notification 中的函數調用從 get_chinese_violation_name 改為 get_chinese_category
  - *結論*：複審功能的配置檢查要準確匹配配置屬性；詳細的日誌對於診斷審核問題至關重要；錯誤處理要包含完整的堆疊追蹤；函數調用要與實際函數名稱匹配

- **2025-01-19**
  - *任務*：修復禁言系統，從舊身份組改為 Discord timeout 功能，並改善 UI/UX
  - *問題*：1) 時間比較錯誤：timedelta 對象被當作整數比較 2) 使用舊的身份組禁言方式 3) 公共通知不夠美觀且缺少自動刪除 4) 私訊通知缺少下次違規警告
  - *解決*：1) 修正時間計算，使用 total_seconds() 轉換為整數 2) 完全移除身份組相關代碼，改用 member.timeout() 3) 重新設計公共通知 embed，添加違規類型圖示、處罰信息、自動刪除提示 4) 在私訊通知中添加下次違規的處罰預警 5) 更新過期檢查邏輯，使用 member.timed_out_until 檢查 6) 修正重新加入伺服器時的 timeout 重新應用邏輯
  - *結論*：Discord 的 timeout 功能比身份組更現代且有效；UI/UX 需要考慮用戶體驗，包括視覺美觀和信息完整性；時間處理要注意數據類型轉換；預警機制能有效降低重複違規

- **2025-01-19**
  - *任務*：修復審核通知 UI 顯示問題，消除重複表情符號和改善視覺效果
  - *問題*：公共通知中出現重複表情符號（如 "🚫 😡 騷擾內容"），顯示格式混亂且不美觀
  - *解決*：1) 重新設計違規類型顯示邏輯，使用統一的 violation_display 映射 2) 每個違規類型只顯示一個表情符號和中文名稱 3) 限制顯示最多2個違規類型避免過長 4) 改用換行分隔而非 "•" 符號 5) 調整顏色為更柔和的紅色 6) 簡化禁言信息顯示
  - *結論*：UI 設計要避免信息重複和視覺混亂；簡潔明瞭比詳細完整更重要；用戶體驗優於技術完整性

- **2025-01-19**
  - *任務*：修復歡迎模組的多個問題：資料庫結構、時區錯誤、AI 流式回應
  - *問題*：1) 舊資料庫缺少 username 和 join_count 欄位 2) moderation 模組時區錯誤 3) AI 流式回應使用方式不正確
  - *解決*：1) 清理舊資料庫文件讓系統重新創建正確表結構 2) 修改 on_member_join 使用 discord.utils.utcnow() 3) 修正 _get_streaming_response 使用 async with 語法
  - *結論*：資料庫結構變更時要清理舊文件；Discord.py 時區處理要統一使用 discord.utils.utcnow()；pydantic_ai 流式回應要使用正確的 async with 語法

- **2025-01-19**
  - *任務*：完全移除 HacksterBot 中的 invites 模組和相關功能
  - *執行*：1) 刪除整個 invites 模組目錄和資料庫檔案 2) 從核心配置檔案移除 InviteConfig 類別和相關設定 3) 清理環境變數檔案中的邀請管理配置 4) 更新測試檔案和文檔移除邀請相關內容 5) 清理 .cursorrules 中的歷史記錄
  - *結論*：模組移除需要系統性清理所有相關檔案、配置、文檔和歷史記錄；確保沒有殘留引用導致錯誤

- **2025-01-19**
  - *任務*：實現 Discord 回覆功能和即時串流回應
  - *需求*：用戶希望 @ bot 時，bot 使用 Discord 的回覆功能回應，並支援串流和即時更新
  - *實現*：1) 修改 AIHandler.handle_message 使用 message.reply() 而非 channel.send() 2) 實現即時串流回應：先發送「思考中...」然後每 0.5 秒或每 100 字元更新一次 3) 創建 _send_streaming_response 方法處理最終完整回應和長訊息分割 4) 添加錯誤處理，回覆失敗時降級到頻道發送
  - *結論*：Discord 回覆功能提升用戶體驗；即時串流讓用戶看到 AI 思考過程；需要處理 Discord API 限制和編輯失敗的情況

- **2025-01-19**
  - *任務*：為文字審核系統添加編輯訊息的審核功能
  - *需求*：用戶要求在文字審核功能中加入對編輯訊息的檢測，編輯的內容也需要進行審核
  - *實現*：1) 在 moderation 模組中添加 on_message_edit 事件監聽器 2) 創建 on_message_edit 方法處理編輯事件 3) 重用現有的 _moderate_message 方法對編輯後的訊息進行審核 4) 添加內容變更檢查，避免對未實際變更的編輯進行重複審核 5) 在 setup 和 teardown 中正確註冊和移除事件監聽器
  - *結論*：編輯訊息審核使用與新訊息相同的審核邏輯和流程；需要檢查內容是否真的有變更避免不必要的審核；事件監聽器的註冊和移除需要保持一致性

- **2025-01-19**
  - *任務*：修改審核系統跳過私訊（DM）處理
  - *需求*：用戶要求審核系統不要處理用戶的私訊訊息，避免對 DM 內容進行審核
  - *實現*：1) 在 on_message 和 on_message_edit 方法中添加 DM 頻道檢查 2) 使用 isinstance(message.channel, discord.DMChannel) 判斷是否為私訊 3) 如果是私訊則直接返回，不進行任何審核處理
  - *結論*：審核系統應該只處理伺服器頻道的訊息，私訊屬於個人隱私範圍不應被審核；DM 檢查要在其他檢查之前進行確保優先級

- **2025-01-19**
  - *任務*：修改 AI 模組跳過私訊（DM）回應
  - *需求*：用戶要求 AI 模組不要回應私訊訊息，只在伺服器頻道中被 @ 時才回應
  - *實現*：1) 在 AI 模組的 _on_message 方法中添加 DM 頻道檢查 2) 移除原有的 is_dm 變數和 DM 處理邏輯 3) 修改條件判斷，只對被提及的訊息回應，不再處理 DM 4) 添加 DM 跳過邏輯在機器人檢查之後
  - *結論*：AI 模組應該只在公共頻道中被明確提及時才回應，避免處理私人對話；保持與審核模組一致的 DM 處理策略

- **2025-01-19**
  - *任務*：完成 HacksterBot 從 SQLite 到 MongoDB 的完整轉換
  - *需求*：用戶要求將所有資料庫操作從 SQLite 轉換為 MongoDB，使用 MongoEngine 實現物件導向的資料庫操作
  - *實現*：1) 建立核心 MongoDB 架構 (core/mongodb.py, core/models.py) 2) 替換所有模組的資料庫服務為 MongoDB 版本 3) 更新依賴從 aiosqlite 到 mongoengine 和 pymongo 4) 修復 URL 安全檢查器與黑名單的整合 5) 建立測試腳本驗證轉換成功 6) 撰寫完整的轉換文檔
  - *結論*：MongoDB 轉換提供更好的擴展性和效能；MongoEngine 讓資料庫操作更物件導向；索引優化大幅提升查詢效能；完整的測試確保轉換成功且無功能缺失

- **2025-01-19**
  - *任務*：修復 blackjack 模組活躍遊戲清理問題
  - *問題*：用戶嘗試開始新遊戲時遇到「你已經有一局正在進行的21點遊戲了」錯誤，但實際上遊戲已結束，是因為遊戲結束後沒有自動清理 active_games 記錄
  - *解決*：1) 在 record_game_result 方法中添加自動清理邏輯 2) 新增 `/bj_reset` 指令讓用戶手動重置遊戲狀態 3) 改善錯誤訊息提供明確的解決方案 4) 添加 reset_user_game 方法處理強制清理
  - *結論*：遊戲狀態管理需要確保完整的生命週期清理；提供用戶友好的錯誤訊息和解決方案；手動重置功能作為備用方案很重要

- **2025-01-19**
  - *任務*：創建獨立的票券系統模組，實現模組間 API 調用
  - *需求*：1) 將票券功能從邀請系統中獨立出來 2) 創建統一的票券管理 API 3) 讓其他模組可以調用票券功能 4) 用戶只能查看自己的票券，無管理員指令
  - *實現*：1) 創建 tickets_system 模組，包含 TicketService 和用戶指令 2) 提供完整的 API：award_ticket、use_ticket、get_user_tickets 等 3) 修改邀請模組使用新的票券系統 API 4) 更新模組載入順序，確保 tickets_system 優先載入 5) 移除邀請模組中重複的票券指令
  - *結論*：模組化設計讓功能更清晰和可重用；統一的 API 避免重複代碼；模組間依賴需要考慮載入順序；獨立的票券系統讓未來擴展更容易

- **2025-01-19**
  - *任務*：修復 HacksterBot 模組導入路徑錯誤，解決 "No module named 'HacksterBot'" 問題
  - *問題*：1) tickets_system 模組使用絕對導入 `from HacksterBot.core.module_base` 導致 ModuleNotFoundError 2) ModuleBase.__init__() 缺少 config 參數 3) bot.py 中 create_module 調用缺少 config 參數
  - *解決*：1) 將所有絕對導入改為相對導入：`from core.module_base import ModuleBase` 2) 修復 TicketsSystemModule.__init__ 添加 config 參數 3) 修復 create_module 函數簽名和調用，正確傳遞 bot 和 config 參數 4) 修復 bot.py 中模組載入邏輯，調用 create_module(self, self.config)
  - *結論*：Python 模組導入要使用相對路徑而非絕對路徑；ModuleBase 初始化需要 bot 和 config 兩個參數；模組載入器要正確傳遞所有必需參數；導入錯誤會阻止整個系統啟動，需要系統性檢查和修復

- **2025-01-19**
  - *任務*：完整整合 invites 模組與 tickets_system 模組，移除重複的票券操作代碼
  - *問題*：invites 模組直接操作 EventTicket 資料庫模型，與 tickets_system 模組功能重複，違反單一職責原則
  - *解決*：1) 移除 invite_mongo.py 中的 EventTicket 直接操作，改用 tickets_system API 2) 添加 set_ticket_system 方法建立模組間引用 3) 修改所有票券相關方法為異步，使用 tickets_system.get_user_tickets 等 API 4) 更新 revoke_invite_tickets 使用 use_ticket 標記為已使用而非直接刪除 5) 在 invites 模組 setup 中獲取 tickets_system 引用並設置
  - *結論*：模組間功能整合要避免重複代碼；使用統一的 API 接口比直接資料庫操作更好；模組間依賴要在 setup 階段正確建立；票券撤銷使用標記而非刪除保持資料完整性

- **2025-01-19**
  - *任務*：修改票券系統概念，移除「使用」狀態，改為直接刪除票券
  - *需求*：用戶要求票券沒有「使用」的概念，當票券需要被移除時應該直接刪除而不是標記為已使用
  - *實現*：1) 修改 EventTicket 模型，移除 is_used、used_at、used_for 欄位 2) 將 use_ticket 方法改為 remove_ticket，直接刪除票券 3) 將 use_tickets_by_type 改為 remove_tickets_by_type 4) 更新所有相關 API 和指令，移除 unused_only 參數 5) 修改用戶指令顯示，移除已使用/未使用狀態 6) 更新 invites 模組使用新的 remove_tickets_by_type API
  - *結論*：票券系統簡化為存在/刪除兩種狀態更符合實際需求；直接刪除比標記使用更直觀；API 設計要與業務邏輯保持一致；模組間 API 變更需要同步更新所有調用方

- **2025-01-19**
  - *任務*：實現邀請模組的每日報告功能，包含定時發送DC成長曲線圖和鄰里大使排行榜
  - *需求*：用戶要求在有邀請活動時可以指定每天幾點在某頻道定時發送 DC 成長人數曲線圖和鄰里大使排行榜，所有設置都在 invite_events.json 中配置
  - *實現*：1) 創建 DailyReporter 類處理報告生成，包含 matplotlib 圖表生成和 Discord embed 排行榜 2) 創建 TaskScheduler 類使用 discord.ext.tasks 處理定時任務調度 3) 修改 invite_events.json 添加 daily_reports 配置區塊 4) 整合到邀請模組中，添加管理員指令：/daily_report、/report_config、/set_report_channel 5) 添加 matplotlib 和相關依賴到 requirements.txt 6) 實現時區處理、配置動態重載、錯誤處理機制
  - *後續簡化*：用戶要求移除複雜的管理指令，只保留 /daily_report 測試指令，改為直接在 JSON 配置文件中設置，添加配置文件自動重載功能（每10分鐘檢查一次）
  - *圖表美化*：用戶要求圖表更美觀：1) 使用 scipy 插值創建圓滑線條，移除點標記 2) 改善背景設計使用現代配色方案 3) 移除邊框和多餘網格線 4) 使用 Microsoft JhengHei 字體確保中文正確顯示 5) 添加現代化統計信息框 6) 排行榜簡化為只顯示活躍邀請和票券數量
  - *最終優化*：用戶要求 1) 移除左上角統計分析卡片 2) 調整曲線粗細從4減至2.5 3) 改為顯示伺服器總人數累積曲線而非邀請記錄 4) 改回30天預設顯示 5) 確保曲線只能往上不會下降（monotonic increasing）
  - *結論*：定時任務使用 discord.ext.tasks 最可靠；matplotlib 需要設置非互動後端和中文字體；配置文件要支援動態重載；MongoDB 查詢要考慮效能優化；簡化用戶操作比提供複雜指令更好；JSON 配置文件直接編輯比Discord指令更靈活；配置自動重載提升用戶體驗；圖表美化要考慮用戶體驗而非技術完整性；scipy 插值讓線條更圓滑；現代化 UI 設計比傳統表格更吸引人；用戶偏好乾淨簡約的圖表設計，移除過多的數據分析元素；伺服器總人數曲線比邀請記錄更直觀反映成長趨勢

- **2025-01-19**
  - *任務*：將每日報告圖表從固定天數改為基於活動日期範圍
  - *需求*：用戶要求圖表顯示從活動開始日到今天（或活動結束日）的成長曲線，活動結束後不再發送新圖表，並將標題移到曲線外面
  - *實現*：1) 修改 generate_growth_chart 從活動配置文件讀取開始和結束日期 2) 當活動結束時返回 None 停止生成圖表 3) 根據活動實際天數調整 X 軸間距 4) 將標題位置從 y=0.95 調整到 y=1.08，副標題到 y=1.03 5) 增加圖表頂部空間從 top=0.85 到 top=0.8 6) 增加圖片 padding 從 0.2 到 0.3 7) 副標題顯示活動名稱而非固定天數 8) 更新 send_daily_report 移除 days_to_show 參數
  - *結論*：基於活動期間的圖表更有意義；活動結束後自動停止發送避免無意義的數據；標題位置要在圖表可視區域外確保美觀；matplotlib 布局調整需要同時考慮 subplots_adjust 和 pad_inches 參數

- **2025-01-19**
  - *任務*：優化圖表Y軸範圍以突出顯示增長趨勢
  - *問題*：當伺服器成員基數較大時，小幅增長在圖表上顯得很平坦，不夠明顯
  - *解決*：1) 調整Y軸範圍不從0開始，而是從最小值減去10%padding開始 2) 在最大值上方也添加10%padding 3) 當沒有增長時，顯示數值5%範圍的小窗口 4) 確保Y軸不會低於0 5) 同時應用到主要和簡化版本的圖表生成
  - *結論*：動態調整Y軸範圍能讓微小增長變得明顯；適當的padding讓圖表更美觀；基數大小不應影響增長趨勢的視覺表現

- **2025-01-19**
  - *任務*：大幅增強圖表曲線圓滑度，解決曲線過於生硬的問題
  - *問題*：用戶反饋圖表曲線太直、不夠圓滑，視覺效果不佳
  - *解決*：1) 增加 scipy 插值點數從500到1000+，使用動態計算 2) 改進錯誤處理，scipy 失敗時使用增強的手動平滑 3) 實現三次貝茲曲線插值算法手動生成圓滑曲線 4) 添加加權移動平均進一步平滑 5) 在每個資料點間插入7個中間點 6) 同時優化主要版本和簡化版本的平滑算法
  - *結論*：多層次的平滑處理讓曲線更自然圓滑；手動插值算法作為 scipy 的可靠備選方案；加權移動平均比簡單平均效果更好；視覺美觀度對用戶體驗很重要

- **2025-01-19**
  - *任務*：特別優化2個數據點的曲線圓滑度問題
  - *問題*：用戶反饋曲線還是很直，發現原因是只有2天數據（05/27-05/28），任何插值算法在2個點下只能生成直線
  - *解決*：1) 為2個點的情況創建特殊處理邏輯，添加人工中間控制點 2) 使用三次樣條插值創建圓滑曲線效果 3) 在 scipy 版本中添加中間控制點，提升曲線中央部分 4) 在手動版本中使用正弦波曲線增強視覺效果 5) 確保即使數據點極少也能產生視覺上圓滑的曲線
  - *結論*：數據點不足是曲線生硬的根本原因；需要為極少數據點提供特殊的視覺增強處理；人工添加控制點能在數學上創造圓滑效果；用戶體驗比數學精確性更重要

- **2025-01-19**
  - *任務*：優化每日排行榜顯示過去7天活躍邀請和今日變化
  - *需求*：用戶要求排行榜只顯示過去7天的邀請活動，並顯示今日變化（+幾/-幾/=），改用GMT+8時區，保持簡約美觀的設計
  - *實現*：1) 修改查詢邏輯，只統計過去7天的邀請記錄 2) 添加今日和昨日邀請數量比較，計算每日變化 3) 重新設計排行榜格式，使用簡約的 `(+N)` 變化指標 4) 將所有時間處理改為GMT+8（Asia/Taipei）5) 優化顯示格式：使用 • 分隔符，**粗體**數字，`代碼塊`變化指標 6) 更新 footer 顯示GMT+8時間和統計範圍
  - *結論*：過去7天的統計比全部歷史更有意義；每日變化指標讓用戶了解趨勢動向；GMT+8時區更符合目標用戶習慣；簡約設計原則讓排行榜更清晰易讀；MongoDB 聚合查詢能高效處理複雜的時間範圍統計

- **2025-01-19**
  - *任務*：修復 Discord embed timestamp 時區顯示錯誤
  - *問題*：雖然移除了 footer 中的時間顯示，但 embed 的 timestamp 仍然顯示錯誤的時區，原因是手動轉換 GMT+8 到 UTC 的方式不正確
  - *解決*：改用 `datetime.utcnow()` 作為 embed timestamp，讓 Discord 自動根據用戶本地時區顯示正確時間
  - *結論*：Discord embed timestamp 應該使用標準 UTC 時間，Discord 會自動轉換為用戶本地時區；手動時區轉換容易出錯，應該讓 Discord 處理時區顯示

- **2025-01-19**
  - *任務*：完成 HacksterBot 會議系統整合，實現 meetings 與 recording 模組的完整整合
  - *實現*：1) 修改 meeting_manager.py 整合 recording 模組 API 2) 添加 Meeting 模型的錄製追蹤欄位 3) 實現會議開始時自動錄製、結束時停止錄製 4) 創建動態管理按鈕根據會議狀態顯示不同操作 5) 實現語音頻道空閒自動結束會議功能 6) 完成三階段會議系統開發：HackMeet 整合、會議預約系統、兩模組整合
  - *結論*：模組間 API 整合要設計清晰的介面；動態 UI 比靜態按鈕提供更好的用戶體驗；自動化功能（如空閒結束）能提升系統實用性；階段性開發讓複雜系統更易管理

- **2025-05-30**
  - *任務*：修復 HacksterBot 錄音系統，實現真正的音軌分離錄音功能
  - *問題*：1) 用戶反映 basic 錄音模式沒有聲音且功能不足 2) discord-ext-voice-recv 整合錯誤 "sink must be an AudioSink not AdvancedMultiTrackSink" 3) 中文字符編碼問題導致會議室名稱錯誤 4) 新版本 discord-ext-voice-recv API 變更導致 "write() takes 2 positional arguments but 3 were given" 錯誤 5) 會議記錄模板中的 \\n 沒有正確顯示為換行符
  - *解決*：1) 完全重寫 meeting_recorder.py，正確實現 voice_recv.AudioSink 繼承 2) 修復中文字符問題，改用英文會議室名稱格式 "Meeting-%m%d-%H%M" 3) 實現真正的音軌分離功能，每個用戶獨立的 WAV 檔案 4) 添加高品質 48kHz 16-bit 立體聲錄音 5) 實現即時音頻包處理和完整的元數據生成 6) 移除所有 basic 模式代碼，專注於高級錄音功能 7) 升級到 discord-ext-voice-recv 最新版本 (0.5.0a165) 8) 修正 AudioSink.write() 方法簽名適配新 API (write(self, source, voice_data)) 9) 創建 _process_template 方法統一處理所有模板的換行符轉換，將字面上的 \\n 轉換為實際換行符
  - *結論*：discord-ext-voice-recv 需要正確的 AudioSink 類繼承和 write 方法實現；音軌分離比混合錄音提供更好的後處理靈活性；中文字符在檔案路徑中容易導致編碼問題；真實的音頻錄音比模擬更有實用價值；用戶體驗要求完整功能而非妥協方案；API 升級時要注意方法簽名變更；模板字串中的換行符需要統一處理，從配置文件讀取的 \\n 需要轉換為實際換行符

# Scratchpad

🎉 **HacksterBot 專案已完成！**  
✅ 所有模組正常運行 (ai, blackjack, invites, moderation, tickets, welcome, tickets_system)  
✅ 系統架構穩定，功能完整  
✅ 已於 2025-01-19 完成所有開發和修復工作  
✅ **MongoDB 轉換已 100% 完成 (2025-01-19)**
✅ **導入路徑問題已完全解決 (2025-01-19)**
✅ **Discord 指令簽名錯誤已修復 (2025-01-19)**

## 最新完成項目 (2025-01-19)
✅ **Discord 指令簽名錯誤修復**
- [x] 修復 tickets_system 模組 app_commands 裝飾器使用錯誤
- [x] 改用正確的 Discord.py app_commands API
- [x] 移除錯誤的 Command.add_parameter 調用
- [x] 使用局部函數定義和裝飾器註冊指令
- [x] 所有指令成功註冊並同步到 Discord

✅ **invites 模組票券系統整合**
- [x] 完全移除 invites 模組中的直接 EventTicket 操作
- [x] 改用 tickets_system 模組的統一 API
- [x] 修改所有票券相關方法為異步調用
- [x] 建立模組間正確的引用關係
- [x] 票券撤銷使用標記而非刪除保持資料完整性

## 🚀 **新重大任務：會議系統整合與開發**  
📅 開始日期：2025-01-19  
🎯 目標：整合 HackMeet-DiscordBot + 創建會議預約系統

### 階段一：HackMeet-DiscordBot 整合 (會議錄製模組) ✅
- [x] 分析 HackMeet-DiscordBot 現有功能和架構
- [x] 從 pycord 轉換到 discord.py 
- [x] 整合為 HacksterBot 的 `recording` 模組
- [x] 保留完整功能：多機器人管理、會議室創建、threads、錄音軌
- [x] 移除不需要的功能：STT、摘要生成、Google Drive 上傳
- [x] 確保錄製 bot 與主 bot 分離
- [x] 完成 RecordingConfig 配置整合
- [x] 完成所有 recording 服務實現

### 階段二：會議預約系統模組 (meetings 模組) ✅ **已完成**
- [x] 創建 MeetingsConfig 配置
- [x] 建立 MongoDB 模型：Meeting, MeetingAttendee, MeetingReminder, MeetingParseLog
- [x] 創建會議模組主要架構 (meetings/__init__.py)
- [x] 實現時間解析 AI 代理 (agents/time_parser.py)
- [x] 創建會議調度器服務 (services/meeting_scheduler.py)
- [x] 實現會議確認視圖 (views/meeting_confirmation_view.py)
- [x] 實現出席管理視圖 (views/meeting_attendance_view.py)
- [x] 實現提醒服務 (services/reminder_service.py)
- [x] 實現會議管理器 (services/meeting_manager.py)
- [x] 創建 `/meet` 指令與自然語言時間解析
- [x] 會議邀約發布系統
- [x] 自動提醒系統（24小時前、5分鐘前）
- [x] 會議開始時自動創建語音頻道
- [x] 會議管理功能（改約、新增/移除人員、更改標題、取消）

### 階段三：兩模組整合 ✅ **已完成**
- [x] meetings 模組調用 recording 模組
- [x] 語音頻道創建後自動開始錄製
- [x] 會議結束後錄製處理
- [x] 動態管理按鈕根據會議狀態變化
- [x] 語音頻道空閒自動結束會議

## 當前狀態
- **系統狀態**: 穩定運行 ✅
- **模組載入**: 8/8 模組正常 ✅ (新增 meetings)
- **核心功能**: 全部測試通過 ✅
- **資料庫**: MongoDB 完全整合 ✅
- **導入系統**: 完全修復 ✅
- **指令系統**: Discord 同步正常 ✅
- **會議系統**: 三階段全部完成 ✅ **重大里程碑達成！**

## Progress
- 2025-01-19 14:30  📋 任務分析完成，開始階段一實作
- 2025-01-19 14:45  ✅ HackMeet-DiscordBot 架構分析完成
- 2025-01-19 15:30  ✅ 階段一 recording 模組完成
- 2025-01-19 16:00  🔄 開始階段二 meetings 模組開發
- 2025-01-19 16:30  ✅ 完成 MeetingsConfig 和 MongoDB 模型
- 2025-01-19 18:00  ✅ 階段三兩模組整合完成，會議系統全面上線！

🎉 **會議系統開發完成！**
✅ HacksterBot 現在具備完整的會議管理功能：
- 自然語言時間解析 (`/meet 明天下午2點`)
- 會議確認與出席管理
- 自動提醒系統 (24小時前、5分鐘前)
- 語音頻道自動創建與管理
- 多機器人錄製系統整合
- 會議管理 (開始、結束、取消)
- 自動空閒結束功能

## 範例（Example）

```md
# Lessons

## Cursor-Learned
- **2025-05-20**  
  - *錯誤*：未遵守 matplotlib 只能單圖、不指定顏色的規定  
  - *修正*：改為分次繪圖並移除 color 參數  
  - *結論*：未來繪圖須檢查三條規則（不使用 seaborn、單張圖、不指定顏色）

# Scratchpad

## Plan
- [ ] 搜集使用者需求
- [ ] 設計資料流程
- [ ] 撰寫 API 介面

## Progress
- 05-20 02:20  完成需求訪談摘要
```

---

> ***保持簡潔、即時更新，讓 .cursorrules 成為專案的「作業系統」。***

🚀 **新重大任務：會議系統整合與開發**  
📅 開始日期：2025-01-19  
🎯 目標：整合 HackMeet-DiscordBot + 創建會議預約系統

## 總體計劃
### 階段一：HackMeet-DiscordBot 整合 (會議錄製模組)
- [ ] 分析 HackMeet-DiscordBot 現有功能和架構
- [ ] 從 pycord 轉換到 discord.py 
- [ ] 整合為 HacksterBot 的 `recording` 模組
- [ ] 保留完整功能：多機器人管理、會議室創建、threads、錄音軌
- [ ] 移除不需要的功能：STT、摘要生成、Google Drive 上傳
- [ ] 確保錄製 bot 與主 bot 分離

### 階段二：會議預約系統模組 (meetings 模組)
- [ ] 創建 `/meet` 指令與自然語言時間解析
- [ ] AI 時間分析整合（可配置主要/輔助 AI）
- [ ] 會議確認 embed 和用戶交互
- [ ] 會議邀約發布系統
- [ ] 出席管理（可出席/無法出席/待定）
- [ ] 自動提醒系統（24小時前、5分鐘前）
- [ ] 會議開始時自動創建語音頻道
- [ ] 會議管理功能（改約、新增/移除人員、更改標題、取消）

### 階段三：兩模組整合
- [ ] meetings 模組調用 recording 模組
- [ ] 語音頻道創建後自動開始錄製
- [ ] 會議結束後錄製處理

## Progress
- 2025-01-19 14:30  📋 任務分析完成，開始階段一實作
- 2025-01-19 14:45  ✅ HackMeet-DiscordBot 架構分析完成

### HackMeet-DiscordBot 架構分析結果：
**核心組件**：
- `MultiBotManager`：管理多個錄製機器人實例
- `MeetingBot`：單個錄製機器人，基於 pycord
- `record_meeting.py`：處理音頻錄製邏輯
- `forum.py`：Forum thread 管理
- **多機器人架構**：透過 BOT_TOKENS 配置多個機器人輪流錄製

**核心功能**：
- 自動偵測進入「會議室」頻道觸發新會議
- 創建語音頻道、Forum thread 記錄
- MP3 音軌分離錄製（每個用戶獨立音軌）
- 自動會議室清理機制

**需移除功能**：STT、摘要生成、Google Drive 上傳

## 當前執行階段
🔄 **階段一進行中：開始創建 recording 模組**